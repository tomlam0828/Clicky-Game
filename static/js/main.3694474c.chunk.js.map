{"version":3,"sources":["PicCard/index.js","App.js","serviceWorker.js","index.js"],"names":["PicCard","props","react_default","a","createElement","className","onClick","imageClick","id","alt","name","src","image","App","state","img","score","topScore","imageClicks","message","console","log","_this","setState","concat","Object","toConsumableArray","arr","i","j","temp","length","Math","floor","random","shuffle","indexOf","_this2","this","map","imgs","src_PicCard","key","count","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k8EAceA,MAXf,SAAiBC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,KAAKC,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,kBCiF7EC,6MAlFbC,MAAQ,CACNC,MACAC,MAAO,EACPC,SAAU,EACVC,YAAa,GACbC,QAAS,8BAGXZ,WAAa,SAAAC,GACXY,QAAQC,IAAIb,GAEZc,EAAKC,SAAS,CACZL,YAAW,GAAAM,OAAAC,OAAAC,EAAA,EAAAD,CAAMH,EAAKR,MAAMI,aAAjB,CAA8BV,MAG3C,SAAiBmB,GACf,IAAIC,EAAGC,EAAGC,EACV,IAAKF,EAAID,EAAII,OAAS,EAAGH,EAAI,EAAGA,IAC9BC,EAAIG,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IACpCE,EAAOH,EAAIC,GACXD,EAAIC,GAAKD,EAAIE,GACbF,EAAIE,GAAKC,EAIbK,CAAQpB,IACoC,IAAxCO,EAAKR,MAAMI,YAAYkB,QAAQ5B,IACjCc,EAAKC,SAAS,CACZP,MAAOM,EAAKR,MAAME,MAAQ,EAC1BG,QAAS,2BAEPG,EAAKR,MAAME,OAASM,EAAKR,MAAMG,UACjCK,EAAKC,SAAS,CACZN,SAAUK,EAAKR,MAAMG,SAAW,KAIpCK,EAAKC,SAAS,CACZP,MAAO,EACPG,QAAS,6CACTD,YAAa,8EAKV,IAAAmB,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,0BAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAKkC,KAAKxB,MAAMK,UAElBjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,oBAAYkC,KAAKxB,MAAME,MAAvB,iBAA4CsB,KAAKxB,MAAMG,YAG7Df,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,gBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,6EAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACViC,KAAKxB,MAAMC,IAAIwB,IAAI,SAAAC,GAAI,OACtBtC,EAAAC,EAAAC,cAACqC,EAAD,CACElC,WAAY8B,EAAK9B,WACjBC,GAAIgC,EAAKhC,GACTkC,IAAKF,EAAKhC,GACVI,MAAO4B,EAAK5B,MACZ+B,MAAON,EAAKvB,MAAM6B,WAI1BzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,0CAAmEH,EAAAC,EAAAC,cAAA,sCA5EzDwC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3694474c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction PicCard(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img onClick={() => props.imageClick(props.id)} alt={props.name} src={props.image} />\n            </div>\n        </div>\n    );\n};\n\n\nexport default PicCard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport PicCard from \"./PicCard\";\nimport img from \"./img.json\";\n\nclass App extends Component {\n  state = {\n    img,\n    score: 0,\n    topScore: 0,\n    imageClicks: [],\n    message: \"Click an image to begin!\",\n  };\n\n  imageClick = id => {\n    console.log(id);\n\n    this.setState({\n      imageClicks: [...this.state.imageClicks, id],\n\n    });\n    function shuffle(arr) {\n      var i, j, temp;\n      for (i = arr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n      return arr;\n    };\n    shuffle(img);\n    if (this.state.imageClicks.indexOf(id) === -1) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"You guessed correctly!\"\n      });\n      if (this.state.score >= this.state.topScore) {\n        this.setState({\n          topScore: this.state.topScore + 1\n        });\n      }\n    } else {\n      this.setState({\n        score: 0,\n        message: \"You guessed incorrectly, please try again!\",\n        imageClicks: [],\n      });\n    };\n  };\n\n  render() {\n    return (\n      <div className=\"p-3 mb-2 bg-light text-dark\">\n        <div className=\"row p-3 mb-2 bg-info text-white text-center\">\n          <div className=\"col\">\n            <h4>Clicky Game</h4>\n          </div>\n          <div className=\"col\">\n            <h4>{this.state.message}</h4>\n          </div>\n          <div className=\"col\">\n            <h4>Score: {this.state.score} | Top Score: {this.state.topScore}</h4>\n          </div>\n      </div>\n      <div className=\"p-3 mb-2 bg-dark text-white\">\n        <h1 className=\"text-center\">Clicky Game!</h1>\n        <h2 className=\"text-center\">Click on an image to earn points, but don't click on any more than once!</h2>\n      </div>\n      <div className=\"container\">\n          {this.state.img.map(imgs => (\n            <PicCard\n              imageClick={this.imageClick}\n              id={imgs.id}\n              key={imgs.id}\n              image={imgs.image}\n              count={this.state.count}\n      />\n      ))}\n      </div>\n      <footer className=\"footer\">\n        <h2 className=\"text-center\">Try your best to get the highest score!<span>ðŸ¤ª</span></h2>\n      </footer> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}